{"version":3,"sources":["components/ConvertSelector/ConvertSelector.module.scss","components/App/App.module.scss","components/FileReader/FileReader.module.scss","services/actions/files.ts","services/types/hooks.ts","components/FileList/FileList.tsx","components/FileReader/DnDFileInput.tsx","components/FileReader/FileReader.tsx","components/AppHeader/AppHeader.tsx","utils/subFunctions.ts","utils/fileConstants.ts","services/parsers/parserDIR.ts","services/parsers/parserPMM.ts","services/parsers/parserCSV_DIR.ts","services/parsers/parserXLSX_DIR.ts","services/parsers/parserPMD.ts","services/parsers/parserCSV_PMD.ts","services/parsers/parserXLSX_PMD.ts","services/pmFiles/index.ts","utils/fileManipulations.ts","services/converters/pmd.ts","services/converters/dir.ts","services/converters/index.ts","components/ConvertSelector/ConvertSelector.tsx","components/FileOperationsBlock/FileOperationsBlock.tsx","components/App/App.tsx","reportWebVitals.ts","services/reducers/files.ts","services/reducers/index.ts","index.tsx","components/AppHeader/AppHeader.module.scss","components/FileList/FileList.module.scss"],"names":["module","exports","SET_INPUT_FILES","GET_INPUT_FILES","SET_OUTPUT_FILES","GET_OUTPUT_FILES","SET_AVAILABLE_FORMATS","useSelector","selector","useDispatch","dispatch","FileListBox","width","height","isActive","noFiles","source","files","state","formats","availableFormats","join","toLowerCase","split","unshift","componentWidth","componentHeight","className","styles","fileContainer","fileContainer__active","style","length","fileList","map","file","index","fileRow","fileName","name","dataToInfo","marginTop","TargetBox","onDrop","onChange","avFormats","useDrop","accept","NativeTypes","FILE","drop","item","collect","monitor","isOver","canDrop","ref","uploadButton","uploadButton__active","type","id","inputFile","multiple","htmlFor","FileList","undefined","DnDFileInput","isFileValid","filename","includes","ext","pop","toUpperCase","handleFileDrop","useCallback","i","event","Array","from","currentTarget","FileReader","DndProvider","backend","HTML5Backend","AppHeader","useState","activeBtn","setActiveBtn","useEffect","document","title","handleNavBtnClick","pageName","btnNum","navPanel","navBtn","active","onClick","executeFunctionByName","functionName","context","namespaces","func","console","log","args","apply","xlsx_to_csv","workbook","result","SheetNames","forEach","sheetName","csv","XLSX","sheet_to_csv","Sheets","push","toExponential_PMD","num","expRow","toExponential","slice","splice","putParamToString","param","len","alignRight","parameter","toString","repeat","getFileName","fullname","exampleDir","interpretations","code","stepRange","stepCount","Dgeo","Igeo","Dstrat","Istrat","mad","k","comment","demagType","format","created","dataModel_step","step","x","y","z","mag","a95","dataModel_metaPMD","aName","a","bName","b","sName","s","dName","d","vName","v","dataModel_interpretation","parseDIR","data","eol","RegExp","filter","line","trim","Number","demagSmbl","indexOf","Date","toISOString","parsePMM","lines","replace","params","madGeo","parseCSV_DIR","toFixed","parseXLSX_DIR","Uint8Data","Uint8Array","res","parsePMD","headLine","metadata","steps","parseCSV_PMD","parseXLSX_PMD","PMFile","size","path","this","getDirectionalData","as","exec","Promise","resolve","reject","reader","onload","rawData","pmFile","webkitRelativePath","handleRawData","onerror","readAsArrayBuffer","readAsText","s2ab","buf","ArrayBuffer","view","charCodeAt","download","Blob","createElement","url","URL","createObjectURL","href","body","appendChild","click","setTimeout","removeChild","window","revokeObjectURL","toPMD","extraMeta","metaLines","Object","keys","reduce","toCSV_PMD","metaLine","toXLSX_PMD","metaNames","columnNames","wbook","book_new","wsheet","aoa_to_sheet","wbinary","bookType","toDIR","interpretation","toPMM","toCSV_DIR","toXLSX_DIR","FormatButton","handleClick","initialFormat","children","disabled","btn","btn__basic","ConvertSelector","inputFiles","handleFormatSelect","csvName","xlsxName","selectBlock","horizontalGroup","formatToBtn","FileOperationsBlock","App","containerMain","blockMain","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","outputFiles","rootReducer","combineReducers","action","enhancer","composeWithDevTools","compose","applyMiddleware","thunk","store","createStore","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ead66b7d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectBlock\":\"ConvertSelector_selectBlock__pgNii\",\"horizontalGroup\":\"ConvertSelector_horizontalGroup__1ZkhS\",\"btn\":\"ConvertSelector_btn__2Yt3z\",\"btn__basic\":\"ConvertSelector_btn__basic__MZ9c1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__F88aA\",\"containerMain\":\"App_containerMain__14X0F\",\"blockMain\":\"App_blockMain__3-sQR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeBlock\":\"FileReader_activeBlock__11EmH\",\"uploadButton\":\"FileReader_uploadButton__w0wLX\",\"uploadButton__active\":\"FileReader_uploadButton__active__3vLuv\",\"inputFile\":\"FileReader_inputFile__3AQJE\",\"fileContainer\":\"FileReader_fileContainer__Wauh_\",\"fileList\":\"FileReader_fileList__I--q9\",\"fileRow\":\"FileReader_fileRow__UIGe2\",\"fileName\":\"FileReader_fileName__1tGRk\",\"noFiles\":\"FileReader_noFiles__1AFLV\"};","export const SET_INPUT_FILES: 'SET_INPUT_FILES' = 'SET_INPUT_FILES';\r\nexport const GET_INPUT_FILES: 'GET_INPUT_FILES' = 'GET_INPUT_FILES';\r\nexport const SET_OUTPUT_FILES: 'SET_OUTPUT_FILES' = 'SET_OUTPUT_FILES';\r\nexport const GET_OUTPUT_FILES: 'GET_OUTPUT_FILES' = 'GET_OUTPUT_FILES';\r\nexport const SET_AVAILABLE_FORMATS: 'SET_AVAILABLE_FORMATS' = 'SET_AVAILABLE_FORMATS';","import { store } from \"../..\";\r\nimport { TypedUseSelectorHook, useSelector as selector, useDispatch as dispatch } from \"react-redux\";\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { Action, ActionCreator } from 'redux';\r\nimport { TFilesActions } from \"./files\";\r\n\r\nexport type TAppActions = TFilesActions;\r\n\r\nexport type TRootStore = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk<ReturnType = void> = ActionCreator<\r\n  ThunkAction<ReturnType, Action, TRootStore, TAppActions>\r\n>;\r\nexport const useSelector: TypedUseSelectorHook<TRootStore> = selector;\r\nexport const useDispatch = () => dispatch<AppDispatch | AppThunk>();","import React, { FunctionComponent } from 'react';\r\nimport { IFileList } from '../../services/types/components';\r\nimport { useSelector } from '../../services/types/hooks';\r\nimport styles from './FileList.module.scss';\r\n\r\nconst FileListBox: FunctionComponent<IFileList> = ({ width, height, isActive, noFiles, source }) => {\r\n\r\n  // eslint-disable-next-line no-eval\r\n  const files = useSelector(state => state.files[`${source}Files`]);\r\n  const avFormats = useSelector(state => state.files.availableFormats);\r\n\r\n  const formats = avFormats.join(', .').toLowerCase().split('');\r\n  formats.unshift('.'); \r\n\r\n  const dataToInfo = (file: File, index: number) => {\r\n    return (\r\n      <div className={`${styles.fileRow} text_main-small`} key={index}>\r\n        <p className={`${styles.fileName}`}>{file.name}</p>\r\n        {/* <p>{file.type}</p>\r\n        <p>{(file.size / 1024).toFixed(0)} Кб</p> */}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const componentWidth: string = width ? width : '100%';\r\n  const componentHeight: string = height ? height : '100%';\r\n\r\n  return (\r\n    <div \r\n      className={`${styles.fileContainer} ${isActive ? styles.fileContainer__active : ''}`} \r\n      style={{width: componentWidth, height: componentHeight}}\r\n    >\r\n      {\r\n        files?.length \r\n        ?\r\n        <div className={styles.fileList}>\r\n          <div className='lowerContainer'>\r\n            {files.map((file: File, index: number) => dataToInfo(file, index))}\r\n          </div>\r\n        </div>\r\n        :\r\n        <div className={styles.noFiles}>\r\n          { \r\n            noFiles ? noFiles : 'Файлы отсутствуют' \r\n          }\r\n          {\r\n            source === 'input' ? <p style={{marginTop: '1rem'}}>Доступные форматы: {formats.join('')}</p> : ''\r\n          }\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FileListBox;","import React, { FunctionComponent, useCallback, useEffect } from 'react';\r\nimport { DropTargetMonitor, useDrop } from 'react-dnd';\r\nimport { NativeTypes } from 'react-dnd-html5-backend';\r\nimport { SET_INPUT_FILES } from '../../services/actions/files';\r\nimport { ITargetBox } from '../../services/types/components';\r\n\r\nimport { useDispatch, useSelector } from '../../services/types/hooks';\r\nimport { getFileName } from '../../utils/subFunctions';\r\nimport FileListBox from '../FileList/FileList';\r\n\r\nimport styles from './FileReader.module.scss';\r\n\r\nconst TargetBox: FunctionComponent<ITargetBox> = ({onDrop, onChange, avFormats}) => {\r\n\r\n  const [{ canDrop, isOver }, drop] = useDrop(\r\n    () => ({\r\n      accept: [NativeTypes.FILE],\r\n      drop(item: { files: any[] }) {\r\n        if (onDrop) {\r\n          onDrop(item);\r\n        }\r\n      },\r\n      collect: (monitor: DropTargetMonitor) => ({\r\n        isOver: monitor.isOver(),\r\n        canDrop: monitor.canDrop(),\r\n      }),\r\n    }),\r\n    [onDrop]\r\n  );\r\n\r\n  const formats = avFormats.join(', .').toLowerCase().split('');\r\n  formats.unshift('.'); \r\n\r\n  const isActive = canDrop && isOver;\r\n  \r\n  return (\r\n    <div ref={drop}>\r\n      <div className={`${styles.uploadButton} ${isActive ? styles.uploadButton__active : ''}`} >\r\n        <input \r\n          type='file' \r\n          id='input'\r\n          className={`${styles.inputFile}`}\r\n          onChange={onChange}\r\n          multiple={true}\r\n          accept={formats.join('')}\r\n        />\r\n        <label htmlFor=\"input\">{isActive ? 'Отпустите файл' : 'Перетащите или выберите файл'}</label>\r\n      </div>\r\n      <FileListBox source='input' height='90%' isActive={isActive} noFiles={ isActive ? 'Отпустите файл' : undefined }/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst DnDFileInput = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const formats = useSelector(state => state.files.availableFormats);\r\n\r\n  const isFileValid = (filename: string, formats: string[]) => {\r\n    if (!filename.includes('.')) return false;\r\n    const ext = filename.split('.').pop()?.toUpperCase();\r\n    return formats.includes(ext as string);\r\n  }\r\n\r\n  const handleFileDrop = useCallback(\r\n    (item) => {\r\n      if (item) {\r\n        const files = item.files;\r\n        for (let i = 0; i < files.length; i++) {\r\n          if (!isFileValid(files[i].name, formats)) return null;\r\n        }\r\n        dispatch({type: SET_INPUT_FILES, files: files});\r\n      }\r\n    },\r\n    [formats],\r\n  )\r\n\r\n  const handleFileUpload = (event: any) => {\r\n    const files = Array.from(event.currentTarget.files);\r\n    dispatch({type: SET_INPUT_FILES, files: files});\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <TargetBox onDrop={handleFileDrop} onChange={handleFileUpload} avFormats={formats}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DnDFileInput;","import React from 'react';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\n\r\nimport DnDFileInput from './DnDFileInput';\r\n\r\nconst FileReader = () => {\r\n  return (\r\n    <DndProvider backend={HTML5Backend}>\r\n      <DnDFileInput />\r\n    </DndProvider>\r\n  )\r\n}\r\n\r\nexport default FileReader;\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport styles from \"./AppHeader.module.scss\";\r\nimport { useDispatch } from \"../../services/types/hooks\";\r\nimport { SET_AVAILABLE_FORMATS, SET_INPUT_FILES } from \"../../services/actions/files\";\r\n\r\nconst AppHeader = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [activeBtn, setActiveBtn] = useState(1);\r\n\r\n  useEffect(() => {document.title = 'Конвертер палеомагнитных данных > Статистика направлений'}, []);\r\n\r\n  const handleNavBtnClick = useCallback(\r\n    (formats: string[], pageName, btnNum) => {\r\n      dispatch({type: SET_AVAILABLE_FORMATS, formats: formats});\r\n      dispatch({type: SET_INPUT_FILES, files: []});\r\n      document.title = `Конвертер палеомагнитных данных > ${pageName}`;\r\n      setActiveBtn(btnNum);\r\n    },\r\n    [],\r\n  )\r\n\r\n  return (\r\n    <nav className={styles.navPanel}>\r\n      <button \r\n        className={activeBtn === 0 ? `${styles.navBtn} ${styles.active}` : styles.navBtn} \r\n        onClick={() => handleNavBtnClick(['PMD', 'CSV', 'XLSX'], 'Результаты чисток', 0)}\r\n      >\r\n        Результаты чисток\r\n      </button>\r\n      <button \r\n        className={activeBtn === 1 ? `${styles.navBtn} ${styles.active}` : styles.navBtn}\r\n        onClick={() => handleNavBtnClick(['DIR', 'PMM', 'CSV', 'XLSX'], 'Статистика направлений', 1)}\r\n      >\r\n        Статистика направлений\r\n      </button>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default AppHeader;","import * as XLSX from 'xlsx';\r\n\r\nexport function executeFunctionByName (functionName: string, context: any, ...args: any[]) {\r\n  const namespaces = functionName.split(\".\");\r\n  const func: any = namespaces.pop();\r\n  for (let i = 0; i < namespaces.length; i++) {\r\n    context = context[namespaces[i]];\r\n  }\r\n  console.log(context);\r\n  return context[func].apply(context, args);\r\n}\r\n\r\nexport const xlsx_to_csv = function to_csv(workbook: any) {\r\n  var result: string[] = [];\r\n  workbook.SheetNames.forEach((sheetName: string) => {\r\n    var csv = XLSX.utils.sheet_to_csv(workbook.Sheets[sheetName]);\r\n    if(csv.length){\r\n      result.push(csv);\r\n    }\r\n  });\r\n  return result.join(\"\\n\");\r\n};\r\n\r\nexport const toExponential_PMD = (num: number | string) => {\r\n  if (!+num) return num;\r\n  num = +num; \r\n  // pmd-like exponential format looks like this: -2.85E-08, 1.57E-02, 2.34E-12, ...\r\n\tconst expRow = num.toExponential(2).toUpperCase().split('');\r\n  if (!+expRow.slice(-2, -1)) expRow.splice(-1, 0, '0');\r\n  return expRow.join('');\r\n}\r\n\r\nexport const putParamToString = ((param: string|number, len: number, alignRight?: boolean) => {\r\n  let parameter = param.toString().slice(0, len);\r\n  if ((typeof(param) === 'number') || alignRight) {\r\n    return ' '.repeat(len - parameter.length) + parameter;\r\n  } else if (len === 0) return '  ' + param; // comment case\r\n  return parameter + ' '.repeat(len - parameter.length);\r\n}) \r\n\r\nexport const getFileName = (fullname: string) => {\r\n  // delete file extension and get file name\r\n  if (!fullname.includes('.')) return fullname;\r\n  const filename = fullname.split('.');\r\n  filename.pop();\r\n  console.log(filename, filename.join(''))\r\n  return filename.join('');\r\n}","export const examplePMD = {\r\n  metadata: {\r\n    name: 'string',\r\n    a: 0,\r\n    b: 0,\r\n    s: 0,\r\n    d: 0,\r\n    v: 0,\r\n  },\r\n  steps: [{\r\n    step: 'string',\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n    mag: 0,\r\n    Dgeo: 0,\r\n    Igeo: 0,\r\n    Dstrat: 0,\r\n    Istrat: 0,\r\n    a95: 0,\r\n    comment: 'string',\r\n    demagType: 'string',\r\n  }],\r\n  format: 'string',\r\n  created: 'string',\r\n}\r\n\r\nexport const exampleDir = {\r\n  name: 'string',\r\n  interpretations: [{\r\n    id: 'string',\r\n    code: 'string',\r\n    stepRange: 'string',\r\n    stepCount: 0,\r\n    Dgeo: 0,\r\n    Igeo: 0,\r\n    Dstrat: 0,\r\n    Istrat: 0,\r\n    mad: 0,\r\n    k: 0,\r\n    comment: 'string',\r\n    demagType: 'string',\r\n  }],\r\n  format: 'string',\r\n  created: 'string',\r\n}\r\n\r\nexport const dataModel_step: any = {\r\n  step: 4,\r\n  x: 10,\r\n  y: 10,\r\n  z: 10,\r\n  mag: 10,\r\n  Dgeo: 6,\r\n  Igeo: 6,\r\n  Dstrat: 6,\r\n  Istrat: 6,\r\n  a95: 5,\r\n  comment: 0\r\n}\r\n\r\nexport const dataModel_metaPMD: any = {\r\n  name: 10,\r\n  aName: 2,\r\n  a: 5,\r\n  bName: 5,\r\n  b: 5,\r\n  sName: 5,\r\n  s: 5,\r\n  dName: 5,\r\n  d: 5,\r\n  vName: 5,\r\n  v: 7\r\n}\r\n\r\n// count of symbols for each property (column) in line (row)\r\nexport const dataModel_interpretation: any = {\r\n  id: 7,\r\n  code: 8,\r\n  stepRange: 9,\r\n  stepCount: 3,\r\n  Dgeo: 6,\r\n  Igeo: 6,\r\n  Dstrat: 6,\r\n  Istrat: 6,\r\n  mad: 6,\r\n  k: 5,\r\n  comment: 0\r\n}\r\n","const parseDIR = (data: string, name: string) => {\r\n  \r\n  // eslint-disable-next-line no-control-regex\r\n  const eol = new RegExp(\"\\r?\\n\");\r\n  // Get all lines except the last one (it's garbage)\r\n  const lines = data.split(eol).filter(line => line.length > 1);\r\n\r\n  const interpretations = lines.map((line) => {\r\n\r\n    // ID | CODE | STEPRANGE | N | Dg | Ig | kg | Ds | Is | MAD | Comment \r\n    // it's old format and we can't just split by \" \" 'cause it can cause issues\r\n    const id = line.slice(0, 7).trim();\r\n    const code = line.slice(7, 14).trim();\r\n    const stepRange = line.slice(14, 24).trim();\r\n    const stepCount = Number(line.slice(24, 27).trim());\r\n    const Dgeo = Number(line.slice(27, 33).trim());\r\n    const Igeo = Number(line.slice(33, 39).trim());\r\n    const Dstrat = Number(line.slice(39, 45).trim());\r\n    const Istrat = Number(line.slice(45, 51).trim());\r\n    const mad = Number(line.slice(51, 57).trim());\r\n    const k = Number(line.slice(57, 63).trim());\r\n    const comment = line.slice(63, line.length).trim();\r\n\r\n    // there is no standard for demagnetization symbol... and idk why\r\n    // normally it's T20-T570, but sometimes it's NRM-T570, so... split by '-'\r\n    const demagSmbl = stepRange.split('').includes('-') ? stepRange.split('-')[1].split('')[0] : '';\r\n    const thermalTypes = ['T', 't'];\r\n    const alternatingTypes = ['M', 'm'];\r\n\r\n    let demagType = undefined;\r\n\r\n    if (thermalTypes.indexOf(demagSmbl) > -1) demagType = 'thermal';\r\n    else if (alternatingTypes.indexOf(demagSmbl) > -1) demagType = 'alternating field';\r\n\r\n    return {\r\n      id,\r\n      code,\r\n      stepRange,\r\n      stepCount,\r\n      Dgeo,\r\n      Igeo,\r\n      Dstrat,\r\n      Istrat,\r\n      mad,\r\n      k,\r\n      comment,\r\n      demagType,\r\n    };\r\n\r\n  });\r\n  \r\n  return {\r\n    name,\r\n    interpretations,\r\n    format: \"DIR\",\r\n    created: new Date().toISOString(),\r\n  };\r\n\r\n}\r\n\r\nexport default parseDIR;","const parsePMM = (data: string, name: string) => {\r\n  // eslint-disable-next-line no-control-regex\r\n  const eol = new RegExp(\"\\r?\\n\");\r\n  // Get all lines except first and the last one (they're garbage)\r\n  const lines = data.split(eol).slice(1).filter(line => line.length > 1);\r\n\r\n  const header = lines[0].replace(/\"/g, '').split(',');\r\n  name = header[0] || name;\r\n\r\n  // Skip 1 and 2 lines 'cause they're in the header \r\n  const interpretations = lines.slice(2).map((line) => {\r\n    \r\n    const params = line.replace(/\\s+/g, '').split(',');\r\n\r\n    // ID | CODE | STEPRANGE | N | Dg | Ig | kg | a95g | Ds | Is | ks | a95s | comment \r\n    // 'kg' and 'ks' - idiotic garbage and, moreover, there is no 'a95' - there is only MAD (Maximum Angular Deviation)\r\n    const id = params[0];\r\n    const code = params[1];\r\n    const stepRange = params[2];\r\n    const stepCount = Number(params[3]);\r\n    const Dgeo = Number(params[4]);\r\n    const Igeo = Number(params[5]);\r\n    const madGeo = Number(params[7]);\r\n    const Dstrat = Number(params[8]);\r\n    const Istrat = Number(params[9]);\r\n    // const madStrat = Number(params[11]);\r\n    // but we don't need madStrat and madGeo at the same time - they must be equal, otherwise some of them is incorrect, so...\r\n    const mad = madGeo;\r\n    const k = 0;\r\n\r\n    // comment may be with spaces\r\n    let comment = '';\r\n    for (let i = 12; i < params.length; i++) comment += params[i];\r\n    comment = comment.trim();\r\n\r\n    // there is no standard for demagnetization symbol... and idk why\r\n    const demagSmbl = stepRange.split('')[0];\r\n    const thermalTypes = ['T', 't'];\r\n    const alternatingTypes = ['M', 'm'];\r\n\r\n    let demagType = undefined;\r\n\r\n    if (thermalTypes.indexOf(demagSmbl) > -1) demagType = 'thermal';\r\n    else if (alternatingTypes.indexOf(demagSmbl) > -1) demagType = 'alternating field';\r\n\r\n    return {\r\n      id,\r\n      code,\r\n      demagType,\r\n      stepRange,\r\n      stepCount,\r\n      Dgeo,\r\n      Igeo,\r\n      Dstrat,\r\n      Istrat,\r\n      mad,\r\n      k,\r\n      comment\r\n    };\r\n\r\n  });\r\n  \r\n  return {\r\n    name,\r\n    interpretations,\r\n    format: \"PMM\",\r\n    created: new Date().toISOString(),\r\n  };\r\n\r\n}\r\n\r\nexport default parsePMM;","const parseCSV_DIR = (data: string, name: string) => {\r\n  \r\n  // eslint-disable-next-line no-control-regex\r\n  const eol = new RegExp(\"\\r?\\n\");\r\n  // Get all lines except the last one (it's garbage)\r\n  let lines = data.split(eol).filter(line => line.length > 1);\r\n\r\n  const interpretations = lines.slice(1).map((line) => {\r\n    \r\n    const params = line.replace(/\\s+/g, ' ').split(',');\r\n\r\n    // id | Code | StepRange | N | Dgeo | Igeo | Dstrat | Istrat | MAD | K | Comment \r\n    const id = params[0];\r\n    const code = params[1];\r\n    const stepRange = params[2];\r\n    const stepCount = Number(params[3]);\r\n    const Dgeo = +(+params[4]).toFixed(1);\r\n    const Igeo = +(+params[5]).toFixed(1);\r\n    const Dstrat = +(+params[6]).toFixed(1);\r\n    const Istrat = +(+params[7]).toFixed(1);\r\n    const mad = +(+params[8]).toFixed(1);\r\n    const k = +(+params[9]);\r\n\r\n    let comment = '';\r\n    // comment may be with commas\r\n    for (let i = 10; i < params.length; i++) comment += params[i];\r\n    comment = comment.trim();\r\n\r\n    // there is no standard for demagnetization symbol... and idk why\r\n    const demagSmbl = stepRange.split('')[0];\r\n    const thermalTypes = ['T', 't'];\r\n    const alternatingTypes = ['M', 'm'];\r\n\r\n    let demagType = undefined;\r\n    if (thermalTypes.indexOf(demagSmbl) > -1) demagType = 'thermal';\r\n    else if (alternatingTypes.indexOf(demagSmbl) > -1) demagType = 'alternating field';\r\n\r\n    return {\r\n      id,\r\n      code,\r\n      demagType,\r\n      stepRange,\r\n      stepCount,\r\n      Dgeo,\r\n      Igeo,\r\n      Dstrat,\r\n      Istrat,\r\n      mad,\r\n      k,\r\n      comment\r\n    };\r\n\r\n  });\r\n  \r\n  return {\r\n    name,\r\n    interpretations,\r\n    format: \"CSV_DIR\",\r\n    created: new Date().toISOString(),\r\n  };\r\n\r\n}\r\n\r\nexport default parseCSV_DIR;","import * as XLSX from 'xlsx';\r\nimport { xlsx_to_csv } from '../../utils/subFunctions';\r\nimport parseCSV_DIR from './parserCSV_DIR';\r\n\r\nconst parseXLSX_DIR = (data: ArrayBuffer, name: string) => {\r\n  \r\n  const Uint8Data = new Uint8Array(data);\r\n  const workbook = XLSX.read(Uint8Data, {type: 'array'});\r\n  const res = xlsx_to_csv(workbook);\r\n  const finalRes = parseCSV_DIR(res, name);\r\n\r\n  return finalRes;\r\n\r\n}\r\n\r\nexport default parseXLSX_DIR;","const parsePMD = (data: string, name: string) => {\r\n  \r\n  // eslint-disable-next-line no-control-regex\r\n  const eol = new RegExp(\"\\r?\\n\");\r\n  // Get all lines except the last one (it's garbage) and the first one (it's empty)\r\n  const lines = data.split(eol).slice(1).filter(line => line.length > 1);\r\n\r\n  // const headLine = lines[0].replace(/\\s+/g, ' ').split(' ');\r\n  // const metadata = headLine.map((param: string) => )\r\n  \r\n  const headLine = lines[0]; // line with speciment name and orientation params - metadata in other words\r\n  const metadata = {\r\n    name: headLine.slice(0, 10).trim() || name,\r\n    a: +headLine.slice(12, 20).trim(),\r\n    b: +headLine.slice(22, 30).trim(),\r\n    s: +headLine.slice(32, 40).trim(),\r\n    d: +headLine.slice(42, 50).trim(),  \r\n    v: +headLine.slice(52, headLine.length).trim().toLowerCase().split('m')[0],\r\n  }\r\n\r\n  const steps = lines.slice(2).map((line) => {\r\n\r\n    // PAL | Xc (Am2) | Yc (Am2) | Zc (Am2) | MAG (A/m) | Dg | Ig | Ds | Is| a95\r\n    // PAL === Step (mT or temp degrees)\r\n    // it's old format and we can't just split by \" \" 'cause it can cause issues\r\n    const step = line.slice(0, 4).trim();\r\n    const x = +line.slice(4, 14).trim();\r\n    const y = +line.slice(14, 24).trim();\r\n    const z = +line.slice(24, 34).trim();\r\n    const mag = +line.slice(34, 44).trim();\r\n    const Dgeo = +line.slice(44, 50).trim();\r\n    const Igeo = +line.slice(50, 56).trim();\r\n    const Dstrat = +line.slice(56, 62).trim();\r\n    const Istrat = +line.slice(62, 68).trim();\r\n    const a95 = +line.slice(68, 74).trim();\r\n    const comment = line.slice(74, line.length).trim();\r\n\r\n    // there is no standard for demagnetization symbol... and idk why\r\n    const demagSmbl = line.slice(0, 1);\r\n    const thermalTypes = ['T', 't'];\r\n    const alternatingTypes = ['M', 'm'];\r\n\r\n    let demagType = undefined;\r\n\r\n    if (thermalTypes.indexOf(demagSmbl) > -1) demagType = 'thermal';\r\n    else if (alternatingTypes.indexOf(demagSmbl) > -1) demagType = 'alternating field';\r\n\r\n    return {\r\n      step,\r\n      x,\r\n      y,\r\n      z,\r\n      mag,\r\n      Dgeo,\r\n      Igeo,\r\n      Dstrat,\r\n      Istrat,\r\n      a95,\r\n      comment,\r\n      demagType,\r\n    };\r\n\r\n  });\r\n  \r\n  return {\r\n    metadata,\r\n    steps,\r\n    format: \"PMD\",\r\n    created: new Date().toISOString(),\r\n  };\r\n\r\n}\r\n\r\nexport default parsePMD;","const parseCSV_PMD = (data: string, name: string) => {\r\n  \r\n  // eslint-disable-next-line no-control-regex\r\n  const eol = new RegExp(\"\\r?\\n\");\r\n  // Get all lines except the last one (it's garbage)\r\n  let lines = data.split(eol).filter(line => line.length > 1);\r\n  \r\n  const headLine = lines[1].split(',');\r\n\r\n  const metadata = {\r\n    name,\r\n    a: +headLine[0],\r\n    b: +headLine[1],\r\n    s: +headLine[2],\r\n    d: +headLine[3],  \r\n    v: +headLine[4],\r\n  }\r\n\r\n  const steps = lines.slice(3).map((line) => {\r\n    \r\n    const params = line.replace(/\\s+/g, ' ').split(',');\r\n\r\n    // PAL | Xc (Am2) | Yc (Am2) | Zc (Am2) | MAG (A/m) | Dg | Ig | Ds | Is| a95\r\n    // PAL === Step (mT or temp degrees)\r\n    // it's old format and we can't just split by \" \" 'cause it can cause issues\r\n    const step = params[0];\r\n    const x = +(+params[1]).toExponential(2);\r\n    const y = +(+params[2]).toExponential(2);\r\n    const z = +(+params[3]).toExponential(2);\r\n    const mag = +(+params[4]).toExponential(2);\r\n    const Dgeo = +(+params[5]).toFixed(1);\r\n    const Igeo = +(+params[6]).toFixed(1);\r\n    const Dstrat = +(+params[7]).toFixed(1);\r\n    const Istrat = +(+params[8]).toFixed(1);\r\n    const a95 = +(+params[9]).toFixed(1);\r\n\r\n    let comment = '';\r\n    // comment may be with commas\r\n    for (let i = 10; i < params.length; i++) comment += params[i];\r\n    comment = comment.trim();\r\n\r\n    // there is no standard for demagnetization symbol... and idk why\r\n    const demagSmbl = line.slice(0, 1);\r\n    const thermalTypes = ['T', 't'];\r\n    const alternatingTypes = ['M', 'm'];\r\n\r\n    let demagType = undefined;\r\n\r\n    if (thermalTypes.indexOf(demagSmbl) > -1) demagType = 'thermal';\r\n    else if (alternatingTypes.indexOf(demagSmbl) > -1) demagType = 'alternating field';\r\n\r\n    return {\r\n      step,\r\n      x,\r\n      y,\r\n      z,\r\n      mag,\r\n      Dgeo,\r\n      Igeo,\r\n      Dstrat,\r\n      Istrat,\r\n      a95,\r\n      comment,\r\n      demagType,\r\n    };\r\n\r\n  });\r\n  \r\n  return {\r\n    metadata,\r\n    steps,\r\n    format: \"CSV_PMD\",\r\n    created: new Date().toISOString(),\r\n  };\r\n\r\n}\r\n\r\nexport default parseCSV_PMD;","import * as XLSX from 'xlsx';\r\nimport { xlsx_to_csv } from '../../utils/subFunctions';\r\nimport parseCSV_PMD from './parserCSV_PMD';\r\n\r\nconst parseXLSX_PMD = (data: ArrayBuffer, name: string) => {\r\n  \r\n  const Uint8Data = new Uint8Array(data);\r\n  const workbook = XLSX.read(Uint8Data, {type: 'array'});\r\n  const res = xlsx_to_csv(workbook);\r\n  const finalRes = parseCSV_PMD(res, name);\r\n\r\n  return finalRes;\r\n\r\n}\r\n\r\nexport default parseXLSX_PMD;","import parseDIR from \"../parsers/parserDIR\";\r\nimport parsePMM from \"../parsers/parserPMM\";\r\nimport parseCSV_DIR from \"../parsers/parserCSV_DIR\";\r\nimport parseXLSX_DIR from \"../parsers/parserXLSX_DIR\";\r\nimport parsePMD from \"../parsers/parserPMD\";\r\nimport parseCSV_PMD from \"../parsers/parserCSV_PMD\";\r\nimport parseXLSX_PMD from \"../parsers/parserXLSX_PMD\";\r\n\r\nexport default class PMFile {\r\n\r\n  name;\r\n  type;\r\n  size;\r\n  path;\r\n  data;\r\n\r\n  constructor(name: string, type: string, size: number, path: string, data: string | ArrayBuffer | null) {\r\n    this.name = name;\r\n    this.type = type;\r\n    this.size = size;\r\n    this.path = path;\r\n    this.data = data;\r\n  }\r\n\r\n  parsePMD = () => parsePMD(this.data as string, this.name);\r\n  parseCSV_PMD = () => parseCSV_PMD(this.data as string, this.name);\r\n  parseXLSX_PMD = () => parseXLSX_PMD(this.data as ArrayBuffer, this.name);\r\n  parsePMM = () => parsePMM(this.data as string, this.name);\r\n  parseDIR = () => parseDIR(this.data as string, this.name);\r\n  parseCSV_DIR = () => parseCSV_DIR(this.data as string, this.name);\r\n  parseXLSX_DIR = () => parseXLSX_DIR(this.data as ArrayBuffer, this.name);\r\n\r\n}","import PMFile from \"../services/pmFiles\";\r\nimport { exampleDir } from \"./fileConstants\";\r\n\r\ninterface IObjectKeys {\r\n  [key: string | number | symbol]: any;\r\n}\r\n\r\nexport interface IPmdData extends IObjectKeys {\r\n  metadata: {\r\n    name: string;\r\n    a: number;\r\n    b: number;\r\n    s: number;\r\n    d: number;\r\n    v: number;\r\n  };\r\n  steps: {\r\n    step: string;\r\n    x: number;\r\n    y: number;\r\n    z: number;\r\n    mag: number;\r\n    Dgeo: number;\r\n    Igeo: number;\r\n    Dstrat: number;\r\n    Istrat: number;\r\n    a95: number;\r\n    comment: string;\r\n    demagType: string | undefined;\r\n  }[];\r\n  format: string;\r\n  created: string;\r\n}\r\n\r\nexport interface IDirData extends IObjectKeys {\r\n  name: string;\r\n  interpretations: {\r\n    id: string;\r\n    code: string;\r\n    stepRange: string;\r\n    stepCount: number;\r\n    Dgeo: number;\r\n    Igeo: number;\r\n    Dstrat: number;\r\n    Istrat: number;\r\n    mad: number;\r\n    k: number;\r\n    comment: string;\r\n    demagType: string | undefined;\r\n  }[];\r\n  format: string;\r\n  created: string;\r\n}\r\n\r\n\r\nexport const getDirectionalData = (file: File, as: string) => {\r\n\r\n  const ext = (/[.]/.exec(file.name)) ? /[^.]+$/.exec(file.name)?.toString().toLowerCase() : undefined;\r\n\r\n  return new Promise<IPmdData | IDirData>((resolve, reject) => {\r\n    const reader = new FileReader();\r\n\r\n    reader.onload = () => {\r\n\r\n      const handleRawData = (rawData: string | ArrayBuffer | null) => {\r\n        const pmFile = new PMFile(file.name, file.type, file.size, file.webkitRelativePath, rawData);\r\n        console.log(ext)\r\n        switch (ext) {\r\n          case 'pmd': return pmFile.parsePMD();\r\n          case 'dir': return pmFile.parseDIR();\r\n          case 'pmm': return pmFile.parsePMM();\r\n          case 'csv': {\r\n            if (as === 'pmd') return pmFile.parseCSV_PMD();\r\n            if (as === 'dir') return pmFile.parseCSV_DIR();\r\n            return exampleDir;\r\n          }\r\n          case 'xlsx': {\r\n            if (as === 'pmd') return pmFile.parseXLSX_PMD();\r\n            if (as === 'dir') return pmFile.parseXLSX_DIR();\r\n            return exampleDir;\r\n          }\r\n          default: return exampleDir;\r\n        }\r\n      }\r\n\r\n      resolve(handleRawData(reader.result));\r\n\r\n    };\r\n\r\n    reader.onerror = reject;\r\n  \r\n    ext === 'xlsx' ? reader.readAsArrayBuffer(file) : reader.readAsText(file);   \r\n  })\r\n\r\n}\r\n\r\nexport const s2ab = (s: string) => { \r\n  const buf = new ArrayBuffer(s.length); // Convert s to arrayBuffer\r\n  const view = new Uint8Array(buf);  // Create uint8array as viewer\r\n  for (let i = 0; i < s.length; i++) view[i] = s.charCodeAt(i) & 0xFF; // Convert to octet - excel can read only octet (2^8) data\r\n  return buf;    \r\n}\r\n\r\n// Function to download data to a file\r\nexport const download = (data: string | ArrayBuffer, filename: string, type: string) => {\r\n  const file = new Blob([data], {type: type});\r\n  const a = document.createElement(\"a\");\r\n  const url = URL.createObjectURL(file);\r\n  a.href = url;\r\n  a.download = filename;\r\n  document.body.appendChild(a);\r\n  a.click();\r\n  setTimeout(function() {\r\n    document.body.removeChild(a);\r\n    window.URL.revokeObjectURL(url);  \r\n  }, 0); \r\n}","import * as XLSX from 'xlsx';\r\nimport { dataModel_interpretation, dataModel_metaPMD, dataModel_step } from '../../utils/fileConstants';\r\nimport { download, getDirectionalData, IPmdData, s2ab } from '../../utils/fileManipulations';\r\nimport { toExponential_PMD, putParamToString, getFileName } from '../../utils/subFunctions';\r\n\r\nexport const toPMD = async (file: File) => {\r\n  \r\n  const data = await getDirectionalData(file, 'pmd') as IPmdData;\r\n\r\n  const extraMeta: any = {\r\n    ...data.metadata,\r\n    aName: 'a=',\r\n    bName: '   b=',\r\n    sName: '   s=',\r\n    dName: '   d=',\r\n    vName: '   v=',\r\n  }\r\n\r\n  // 119_0     a=162.9   b= 62.0   s=270.0   d=  0.0   v= 1.0E-6m3 --- example\r\n  const metaLines = [\r\n    ' ',\r\n    Object.keys(dataModel_metaPMD).reduce((line, param) => {\r\n      console.log(extraMeta[param], dataModel_metaPMD[param], param)\r\n      if (param === 'v') return (\r\n        line + putParamToString(extraMeta[param].toExponential(1).toUpperCase(), dataModel_metaPMD[param], true)\r\n      );\r\n      if (typeof extraMeta[param] === 'number') return (\r\n        line + putParamToString(extraMeta[param].toFixed(1), dataModel_metaPMD[param], true)\r\n      );\r\n      return line + putParamToString(extraMeta[param], dataModel_metaPMD[param]);\r\n    }, '').trim() + 'm3',\r\n  ].join('\\r\\n') + '\\r\\n';\r\n\r\n  const columnNames = ' PAL  Xc (Am2)  Yc (Am2)  Zc (Am2)  MAG(A/m)   Dg    Ig    Ds    Is   a95 \\r\\n';\r\n\r\n  const lines = data.steps.map((step: any) => {\r\n    return Object.keys(dataModel_step).reduce((line, param) => {\r\n      const alignRight = !!(typeof(step[param]) === 'number');\r\n      if (dataModel_step[param] === 6 || dataModel_step[param] === 5) {\r\n        return line + putParamToString(step[param].toFixed(1), dataModel_step[param], alignRight);\r\n      };\r\n      return line + putParamToString(toExponential_PMD(step[param]), dataModel_step[param], alignRight);\r\n    }, '');\r\n  }).join('\\r\\n');\r\n\r\n  const res = metaLines + columnNames + lines + '\\r\\n';\r\n  const filename = getFileName(data.metadata.name);\r\n\r\n  download(res, `${filename}.pmd`, 'text/plain;charset=utf-8');\r\n\r\n  return 'hey';\r\n\r\n}\r\n\r\nexport const toCSV_PMD = async (file: File) => {\r\n\r\n  const data = await getDirectionalData(file, 'pmd') as IPmdData;\r\n\r\n  const metaNames = 'a,b,s,d,v(m3)\\n';\r\n  const metaLine = [\r\n    data.metadata.a,\r\n    data.metadata.b,\r\n    data.metadata.s,\r\n    data.metadata.d,\r\n    data.metadata.v,\r\n  ].join(',') + '\\n';\r\n\r\n  const columnNames = 'PAL,Xc(Am2),Yc(Am2),Zc(Am2),MAG(A/m),Dg,Ig,Ds,Is,a95\\n';\r\n\r\n  const lines = data.steps.map((step: any) => {\r\n    const line = Object.keys(dataModel_step).reduce((line, param) => {\r\n      return line + `${step[param]},`\r\n    }, '')\r\n    return line.slice(0, -1);\r\n  }).join('\\n');\r\n\r\n  const res = metaNames + metaLine + columnNames + lines;\r\n  const filename = getFileName(data.metadata.name);\r\n\r\n  download(res, `${filename}.csv`, 'text/csv;charset=utf-8');\r\n\r\n  return 'hey';\r\n\r\n}\r\n\r\nexport const toXLSX_PMD = async (file: File) => {\r\n\r\n  const data = await getDirectionalData(file, 'pmd') as IPmdData;\r\n\r\n  const metaNames = 'a,b,s,d,v (m3)'.split(',');\r\n  const metaLine = [\r\n    data.metadata.a,\r\n    data.metadata.b,\r\n    data.metadata.s,\r\n    data.metadata.d,\r\n    data.metadata.v,\r\n  ];\r\n\r\n  const columnNames = 'PAL, Xc (Am2), Yc (Am2), Zc (Am2), MAG(A/m), Dg, Ig, Ds, Is, a95'.split(',');\r\n\r\n  const lines = data.steps.map((step: any) => {\r\n    return Object.keys(dataModel_step).map((param) => {\r\n      return step[param];\r\n    });\r\n  });\r\n\r\n  const wbook = XLSX.utils.book_new();\r\n  wbook.SheetNames.push('data');\r\n  lines.unshift(columnNames);\r\n  lines.unshift(metaLine);\r\n  lines.unshift(metaNames);\r\n  const wsheet = XLSX.utils.aoa_to_sheet(lines);\r\n  wbook.Sheets.data = wsheet;\r\n  const wbinary = XLSX.write(wbook, {bookType: 'xlsx', type: 'binary'});\r\n\r\n  const res = s2ab(wbinary);\r\n  const filename = getFileName(data.metadata.name);\r\n\r\n  download(res, `${filename}.xlsx`, \"application/octet-stream\")\r\n\r\n  return 'hey';\r\n\r\n}","import * as XLSX from 'xlsx';\r\nimport { dataModel_interpretation } from '../../utils/fileConstants';\r\nimport { download, getDirectionalData, IDirData, s2ab } from '../../utils/fileManipulations';\r\nimport { getFileName, putParamToString } from '../../utils/subFunctions';\r\n\r\nexport const toDIR = async (file: File) => {\r\n  \r\n  const data = await getDirectionalData(file, 'dir') as IDirData;\r\n\r\n  const lines = data.interpretations.map((interpretation: any) => {\r\n    const line = Object.keys(dataModel_interpretation).reduce((line, param) => {\r\n      return line + putParamToString(interpretation[param], dataModel_interpretation[param])\r\n    }, '');\r\n    return line;\r\n  }).join('\\r\\n');\r\n\r\n  const res = lines + '\\r\\n';\r\n  const filename = getFileName(data.name);\r\n\r\n  download(res, `${filename}.dir`, 'text/plain;charset=utf-8');\r\n\r\n  return 'hey';\r\n\r\n}\r\n\r\nexport const toPMM = async (file: File) => {\r\n\r\n  const data = await getDirectionalData(file, 'dir') as IDirData;\r\n\r\n  const metaLines = `\"file_comment\"\\n${data.name},\"author\",\"2021-11-27\"\\n`;\r\n  const columnNames = 'ID,CODE,STEPRANGE,N,Dg,Ig,kg,a95g,Ds,Is,ks,a95s,comment\\n';\r\n\r\n  const lines = data.interpretations.map((interpretation: any) => {\r\n    const line = Object.keys(dataModel_interpretation).reduce((line, param, i) => {\r\n      if (i === 6) return line + `${interpretation.k},${interpretation.mad},${interpretation[param]},`;\r\n      if (i === 8) return line + `${interpretation.k},${interpretation.mad},${interpretation.comment}`;\r\n      if (i > 8) return line;\r\n      return line + `${interpretation[param]},`;\r\n    }, '');\r\n    return line;\r\n  }).join('\\n');\r\n\r\n  const res = metaLines + columnNames + lines;\r\n  const filename = getFileName(data.name);\r\n\r\n  download(res, `${filename}.pmm`, 'text/plain;charset=utf-8');\r\n\r\n  return 'hey';\r\n\r\n}\r\n\r\nexport const toCSV_DIR = async (file: File) => {\r\n\r\n  const data = await getDirectionalData(file, 'dir') as IDirData;\r\n  \r\n  const columNames = 'id,Code,StepRange,N,Dgeo,Igeo,Dstrat,Istrat,MAD,K,Comment\\n';\r\n\r\n  const lines = data.interpretations.map((interpretation: any) => {\r\n    const line = Object.keys(dataModel_interpretation).reduce((line, param) => {\r\n      return line + `${interpretation[param]},`\r\n    }, '')\r\n    return line.slice(0, -1);\r\n  }).join('\\n');\r\n\r\n  const res = columNames + lines;\r\n  const filename = getFileName(data.name);\r\n\r\n  download(res, `${filename}.csv`, 'text/csv;charset=utf-8');\r\n\r\n  return 'hey';\r\n\r\n}\r\n\r\nexport const toXLSX_DIR = async (file: File) => {\r\n\r\n  const data = await getDirectionalData(file, 'dir') as IDirData;\r\n\r\n  const columnNames = 'id,Code,StepRange,N,Dgeo,Igeo,Dstrat,Istrat,MAD,K,Comment'.split(',');\r\n\r\n  const lines = data.interpretations.map((interpretation: any) => {\r\n    return Object.keys(dataModel_interpretation).map((param) => {\r\n      return interpretation[param];\r\n    });\r\n  });\r\n\r\n  const wbook = XLSX.utils.book_new();\r\n  wbook.SheetNames.push('data');\r\n  lines.unshift(columnNames);\r\n  const wsheet = XLSX.utils.aoa_to_sheet(lines);\r\n  wbook.Sheets.data = wsheet;\r\n  const wbinary = XLSX.write(wbook, {bookType: 'xlsx', type: 'binary'});\r\n\r\n  const res = s2ab(wbinary);\r\n  const filename = getFileName(data.name);\r\n\r\n  download(res, `${filename}.xlsx`, \"application/octet-stream\")\r\n\r\n  return 'hey';\r\n\r\n}","import { toPMD, toCSV_PMD, toXLSX_PMD } from \"./pmd\";\r\nimport { toDIR, toPMM, toCSV_DIR, toXLSX_DIR } from \"./dir\";\r\n\r\nexport {\r\n  toPMD,\r\n  toDIR, toPMM,\r\n  toCSV_DIR, toXLSX_DIR\r\n};\r\n\r\n(window as any).toPMD = toPMD;\r\n(window as any).toDIR = toDIR;\r\n(window as any).toPMM = toPMM;\r\n(window as any).toCSV_DIR = toCSV_DIR;\r\n(window as any).toXLSX_DIR = toXLSX_DIR;\r\n(window as any).toCSV_PMD = toCSV_PMD;\r\n(window as any).toXLSX_PMD = toXLSX_PMD;","import React, { FunctionComponent } from \"react\";\r\nimport { executeFunctionByName } from \"../../utils/subFunctions\";\r\nimport styles from \"./ConvertSelector.module.scss\";\r\n\r\nimport { toPMD, toDIR, toPMM } from \"../../services/converters\";\r\nimport { useSelector } from \"../../services/types/hooks\";\r\nimport { IFormatButton } from \"../../services/types/components\";\r\n\r\nconst FormatButton: FunctionComponent<IFormatButton> = ({handleClick, files, initialFormat, children}) => {\r\n  \r\n  const disabled = !!!files?.length;\r\n\r\n  return (\r\n    <button \r\n      className={`${styles.btn} ${styles.btn__basic}`} \r\n      onClick={\r\n        (event: React.MouseEvent) => files.map((file: File) => handleClick(children, file, initialFormat))\r\n      }\r\n      disabled={disabled}\r\n    >\r\n      {children}\r\n    </button>\r\n  )\r\n}\r\n\r\nconst ConvertSelector = () => {\r\n\r\n  const files = useSelector(state => state.files.inputFiles);\r\n  const formats = useSelector(state => state.files.availableFormats);\r\n\r\n  const handleFormatSelect = (format: string, file: File, initialFormat: string) => {\r\n    const csvName = `toCSV_${initialFormat}`;\r\n    const xlsxName = `toXLSX_${initialFormat}`;\r\n\r\n    switch (format) {\r\n      case 'PMD': return toPMD(file);\r\n      case 'DIR': return toDIR(file);\r\n      case 'PMM': return toPMM(file);\r\n      case 'CSV': return executeFunctionByName(csvName, window, file);\r\n      case 'XLSX': return executeFunctionByName(xlsxName, window, file);\r\n      default: return;\r\n    }\r\n  }\r\n\r\n  const formatToBtn = (format: string) => {\r\n    return (\r\n      <FormatButton handleClick={handleFormatSelect} files={files} initialFormat={formats[0]}>\r\n        {format}\r\n      </FormatButton>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className={styles.selectBlock}>\r\n      <div className={styles.horizontalGroup}>\r\n        {formats.map((format: string) => formatToBtn(format))}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ConvertSelector;","import React from \"react\";\r\nimport styles from \"./FileOperationsBlock.module.scss\";\r\n\r\nimport ConvertSelector from \"../ConvertSelector/ConvertSelector\";\r\nimport FileListBox from \"../FileList/FileList\";\r\n\r\nconst FileOperationsBlock = () => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <ConvertSelector />\r\n      <FileListBox source='output' width='60%' noFiles='Конвертированные файлы автоматически начнут загружаться при нажатии на одну из кнопок выше'/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FileOperationsBlock;","import React from 'react';\nimport styles from './App.module.scss';\n\nimport FileReader from '../FileReader/FileReader';\nimport AppHeader from '../AppHeader/AppHeader';\nimport FileOperationsBlock from '../FileOperationsBlock/FileOperationsBlock';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppHeader />\n        <div className={styles.containerMain}>\n          <div className={`${styles.blockMain} text_main-large`}>\n            <FileReader />\n          </div>\n          <div className={`${styles.blockMain} text_main-large`}>\n            <FileOperationsBlock />\n          </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Reducer } from \"redux\";\r\nimport { \r\n  SET_INPUT_FILES,\r\n  GET_INPUT_FILES,\r\n  SET_OUTPUT_FILES,\r\n  GET_OUTPUT_FILES,\r\n  SET_AVAILABLE_FORMATS\r\n} from \"../actions/files\";\r\nimport { IFiles } from \"../types/components\";\r\nimport { TFilesActions } from \"../types/files\";\r\n\r\nconst initialState: IFiles = {\r\n\r\n  inputFiles: [],\r\n  outputFiles: [],\r\n\r\n  availableFormats: ['DIR', 'PMM', 'CSV', 'XLSX']\r\n\r\n}\r\n\r\nexport const filesReducer: Reducer = (state = initialState, action: TFilesActions) => {\r\n  switch (action.type) {\r\n    case SET_INPUT_FILES: {\r\n      return {\r\n        ...state,\r\n        inputFiles: action.files\r\n      }\r\n    }\r\n    case GET_INPUT_FILES: {\r\n      return {\r\n        ...state\r\n      }\r\n    }\r\n    case SET_OUTPUT_FILES: {\r\n      return {\r\n        ...state,\r\n        outputFiles: action.files\r\n      }\r\n    }\r\n    case GET_OUTPUT_FILES: {\r\n      return {\r\n        ...state\r\n      }\r\n    }\r\n    case SET_AVAILABLE_FORMATS: {\r\n      return {\r\n        ...state,\r\n        availableFormats: [...action.formats]\r\n      }\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}","import { combineReducers } from \"redux\";\r\nimport { filesReducer } from \"./files\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  files: filesReducer\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport { rootReducer } from './services/reducers';\nimport { Provider } from 'react-redux';\n\nconst composeEnhancers =\n  typeof window === 'object' && composeWithDevTools\n    ? composeWithDevTools({})\n    : compose;\n\nconst enhancer = composeEnhancers(applyMiddleware(thunk));\n\nexport const store = createStore(\n  rootReducer,\n  enhancer\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navPanel\":\"AppHeader_navPanel__2WnDe\",\"navBtn\":\"AppHeader_navBtn__1EmXz\",\"active\":\"AppHeader_active__3UIX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fileContainer\":\"FileList_fileContainer__COTjY\",\"fileContainer__active\":\"FileList_fileContainer__active__GPXyW\",\"fileList\":\"FileList_fileList__MrH1C\",\"fileRow\":\"FileList_fileRow__YDRAM\",\"fileName\":\"FileList_fileName__3sUfS\",\"noFiles\":\"FileList_noFiles__3t4ft\"};"],"sourceRoot":""}